{"version":3,"file":"static/js/317.b8b8b49e.chunk.js","mappings":"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","sources":["components/AddMateriaModal.js","utils/validation.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport { FaTimes, FaPlus, FaClipboardCheck, FaBook } from 'react-icons/fa';\r\nimport { useMaterias } from '../contexts/MateriasContext';\r\nimport { useError } from '../contexts/ErrorContext';\r\nimport { validateMateria, sanitizeMateria } from '../utils/validation';\r\n\r\nfunction AddMateriaModal({ setModalOpen }) {\r\n  const { adicionarMateria } = useMaterias();\r\n  const { addError, addSuccess } = useError();\r\n  \r\n  const [nome, setNome] = useState('');\r\n  const [horas, setHoras] = useState('');\r\n  const [pesoFalta, setPesoFalta] = useState('1');\r\n  const [avaliacoes, setAvaliacoes] = useState([]);\r\n  const [novaAvaliacao, setNovaAvaliacao] = useState({\r\n    tipo: '',\r\n    data: '',\r\n    descricao: ''\r\n  });\r\n  const [mostrarAvaliacoes, setMostrarAvaliacoes] = useState(false);\r\n  const [mostrarCalendario, setMostrarCalendario] = useState(false);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!nome || !horas) {\r\n      addError('Nome e carga horária são obrigatórios');\r\n      return;\r\n    }\r\n\r\n    const formData = { nome, horas, pesoFalta };\r\n    const validation = validateMateria(formData);\r\n    \r\n    if (!validation.isValid) {\r\n      const errors = Object.values(validation.errors).join(', ');\r\n      addError(`Erro: ${errors}`);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const maxFaltas = Math.floor((parseInt(horas) * 0.25) / parseInt(pesoFalta));\r\n      const novaMateria = {\r\n        nome: nome.trim(),\r\n        horas: parseInt(horas),\r\n        pesoFalta: parseInt(pesoFalta),\r\n        maxFaltas,\r\n        faltas: 0,\r\n        datasFaltas: [],\r\n        avaliacoes: avaliacoes\r\n      };\r\n\r\n      const materiaSanitizada = sanitizeMateria(novaMateria);\r\n      await adicionarMateria(materiaSanitizada);\r\n      addSuccess('Matéria adicionada com sucesso!');\r\n      setModalOpen(false);\r\n    } catch (error) {\r\n      addError('Erro ao adicionar matéria');\r\n    }\r\n  };\r\n\r\n  const adicionarAvaliacao = () => {\r\n    if (!novaAvaliacao.tipo || !novaAvaliacao.data) {\r\n      addError('Tipo e data são obrigatórios para a avaliação');\r\n      return;\r\n    }\r\n\r\n    setAvaliacoes(prev => [...prev, { ...novaAvaliacao, id: Date.now() }]);\r\n    setNovaAvaliacao({\r\n      tipo: '',\r\n      data: '',\r\n      descricao: ''\r\n    });\r\n    addSuccess('Avaliação adicionada!');\r\n  };\r\n\r\n  const removerAvaliacao = (id) => {\r\n    setAvaliacoes(prev => prev.filter(av => av.id !== id));\r\n  };\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black/50 flex items-end sm:items-center justify-center z-[10001] p-0 sm:p-4\">\r\n      <div className=\"bg-white w-full sm:max-w-md max-h-[90vh] overflow-y-auto rounded-t-2xl sm:rounded-lg shadow-2xl\">\r\n        <div className=\"sticky top-0 bg-white z-10 border-b\">\r\n          <div className=\"sm:hidden flex justify-center pt-2 pb-1\">\r\n            <div className=\"w-12 h-1.5 bg-gray-300 rounded-full\"></div>\r\n          </div>\r\n          <div className=\"flex justify-between items-center px-4 sm:px-6 py-3\">\r\n            <h2 className=\"text-base sm:text-xl font-semibold text-gray-800\">Nova Matéria</h2>\r\n            <button\r\n              onClick={() => setModalOpen(false)}\r\n              className=\"text-gray-500 hover:text-gray-700 p-2 rounded-lg\"\r\n              aria-label=\"Fechar\"\r\n            >\r\n              <FaTimes />\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <form onSubmit={handleSubmit} className=\"space-y-4 px-4 sm:px-6 py-4\">\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n              Nome da Matéria\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              value={nome}\r\n              onChange={(e) => setNome(e.target.value)}\r\n              className=\"w-full px-3 py-2 border rounded-md text-sm\"\r\n              placeholder=\"Ex: Cálculo 1\"\r\n              required\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n              Carga Horária\r\n            </label>\r\n            <select\r\n              value={horas}\r\n              onChange={(e) => setHoras(e.target.value)}\r\n              className=\"w-full px-3 py-2 border rounded-md text-sm\"\r\n              required\r\n            >\r\n              <option value=\"\">Selecione</option>\r\n              <option value=\"30\">30 horas</option>\r\n              <option value=\"45\">45 horas</option>\r\n              <option value=\"60\">60 horas</option>\r\n              <option value=\"75\">75 horas</option>\r\n              <option value=\"90\">90 horas</option>\r\n              <option value=\"120\">120 horas</option>\r\n            </select>\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n              Peso da Falta\r\n            </label>\r\n            <select\r\n              value={pesoFalta}\r\n              onChange={(e) => setPesoFalta(e.target.value)}\r\n              className=\"w-full px-3 py-2 border rounded-md text-sm\"\r\n            >\r\n              <option value=\"1\">1 falta por vez</option>\r\n              <option value=\"2\">2 faltas por vez</option>\r\n              <option value=\"4\">4 faltas por vez</option>\r\n            </select>\r\n          </div>\r\n\r\n          <div className=\"border-t pt-4\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => setMostrarAvaliacoes(!mostrarAvaliacoes)}\r\n              className=\"text-blue-600 hover:text-blue-700 text-sm flex items-center\"\r\n            >\r\n              <FaPlus className=\"mr-1\" /> {mostrarAvaliacoes ? 'Ocultar Avaliações' : 'Adicionar Avaliações'}\r\n            </button>\r\n          </div>\r\n\r\n          {mostrarAvaliacoes && (\r\n            <>\r\n              <div className=\"space-y-3 mb-4\">\r\n                <div className=\"flex flex-col sm:flex-row gap-2\">\r\n                  <input\r\n                    type=\"text\"\r\n                    value={novaAvaliacao.tipo}\r\n                    onChange={(e) => setNovaAvaliacao(prev => ({ ...prev, tipo: e.target.value }))}\r\n                    className=\"w-full sm:flex-1 min-w-0 px-3 py-2 border rounded-md text-sm\"\r\n                    placeholder=\"Tipo (ex: Prova, Trabalho, Seminário)\"\r\n                    required\r\n                  />\r\n                  <button\r\n                    type=\"button\"\r\n                    onClick={() => setMostrarCalendario(!mostrarCalendario)}\r\n                    className=\"w-full sm:w-[180px] px-3 py-2 border rounded-md text-sm text-left hover:bg-gray-50 transition-colors\"\r\n                  >\r\n                    {novaAvaliacao.data \r\n                      ? new Date(novaAvaliacao.data + 'T00:00:00').toLocaleDateString('pt-BR')\r\n                      : 'Selecionar data'}\r\n                  </button>\r\n                </div>\r\n\r\n                {mostrarCalendario && (\r\n                  <div className=\"border rounded-lg p-3 bg-gray-50\">\r\n                    <Calendar\r\n                      onChange={(date) => {\r\n                        setNovaAvaliacao(prev => ({ \r\n                          ...prev, \r\n                          data: date.toISOString().split('T')[0] \r\n                        }));\r\n                        setMostrarCalendario(false);\r\n                      }}\r\n                      value={novaAvaliacao.data ? new Date(novaAvaliacao.data + 'T00:00:00') : new Date()}\r\n                      locale=\"pt-BR\"\r\n                      minDetail=\"month\"\r\n                      next2Label={null}\r\n                      prev2Label={null}\r\n                      navigationLabel={({ date }) => {\r\n                        const mes = date.toLocaleString('pt-BR', { month: 'long' });\r\n                        const ano = date.toLocaleString('pt-BR', { year: 'numeric' });\r\n                        return (\r\n                          <div className=\"flex items-center justify-center gap-2 min-w-0\" title={`${mes} ${ano}`}>\r\n                            <span className=\"truncate text-sm font-semibold capitalize\">{mes}</span>\r\n                            <span className=\"shrink-0 text-sm font-semibold\">{ano}</span>\r\n                          </div>\r\n                        );\r\n                      }}\r\n                      className=\"border-none w-full\"\r\n                    />\r\n                  </div>\r\n                )}\r\n\r\n                <div className=\"flex flex-col sm:flex-row gap-2\">\r\n                  <input\r\n                    type=\"text\"\r\n                    value={novaAvaliacao.descricao}\r\n                    onChange={(e) => setNovaAvaliacao(prev => ({ ...prev, descricao: e.target.value }))}\r\n                    className=\"w-full sm:flex-1 min-w-0 px-3 py-2 border rounded-md text-sm\"\r\n                    placeholder=\"Descrição (opcional)\"\r\n                  />\r\n                  <button\r\n                    type=\"button\"\r\n                    onClick={adicionarAvaliacao}\r\n                    className=\"w-full sm:w-auto px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 text-sm\"\r\n                  >\r\n                    Adicionar\r\n                  </button>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"space-y-2 max-h-40 overflow-y-auto pr-1\">\r\n                {avaliacoes.map(av => (\r\n                  <div\r\n                    key={av.id}\r\n                    className=\"flex items-center justify-between bg-gray-50 p-2 rounded-md gap-3\"\r\n                  >\r\n                    <div className=\"flex items-center space-x-2 min-w-0\">\r\n                      {av.tipo === 'PROVA' ? (\r\n                        <FaClipboardCheck className=\"text-red-500\" />\r\n                      ) : (\r\n                        <FaBook className=\"text-red-500\" />\r\n                      )}\r\n                      <div className=\"min-w-0\">\r\n                        <p className=\"text-xs sm:text-sm font-medium\">\r\n                          {new Date(av.data).toLocaleDateString('pt-BR')}\r\n                        </p>\r\n                        {av.descricao && (\r\n                          <p className=\"text-xs text-gray-500 break-words\">{av.descricao}</p>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                    <button\r\n                      type=\"button\"\r\n                      onClick={() => removerAvaliacao(av.id)}\r\n                      className=\"text-gray-400 hover:text-red-500 shrink-0\"\r\n                    >\r\n                      <FaTimes />\r\n                    </button>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </>\r\n          )}\r\n\r\n          <div className=\"flex justify-end space-x-2 pt-4\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => setModalOpen(false)}\r\n              className=\"px-4 py-2 text-gray-600 hover:text-gray-800\"\r\n            >\r\n              Cancelar\r\n            </button>\r\n            <button\r\n              type=\"submit\"\r\n              className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\r\n            >\r\n              Adicionar\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddMateriaModal;\r\n","/**\r\n * @fileoverview Funções de validação de dados\r\n * Valida formulários, campos e sanitiza entradas do usuário\r\n */\r\n\r\n/**\r\n * Valida formato de email\r\n * @param {string} email - Email a ser validado\r\n * @returns {boolean} True se email válido\r\n */\r\nexport const validateEmail = (email) => {\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  return emailRegex.test(email);\r\n};\r\n\r\n/**\r\n * Valida requisitos de senha\r\n * @param {string} password - Senha a ser validada\r\n * @returns {Object} {isValid: boolean, message: string}\r\n */\r\nexport const validatePassword = (password) => {\r\n  if (!password) return { isValid: false, message: 'Senha é obrigatória' };\r\n  if (password.length < 6) return { isValid: false, message: 'Senha deve ter pelo menos 6 caracteres' };\r\n  return { isValid: true, message: '' };\r\n};\r\n\r\nexport const validateMateria = (materia) => {\r\n  const errors = {};\r\n\r\n  if (!materia.nome || !materia.nome.trim()) {\r\n    errors.nome = 'Nome da matéria é obrigatório';\r\n  } else if (materia.nome.trim().length < 2) {\r\n    errors.nome = 'Nome deve ter pelo menos 2 caracteres';\r\n  } else if (materia.nome.trim().length > 50) {\r\n    errors.nome = 'Nome deve ter no máximo 50 caracteres';\r\n  }\r\n\r\n  const horas = parseInt(materia.horas);\r\n  if (!materia.horas || isNaN(horas)) {\r\n    errors.horas = 'Carga horária é obrigatória';\r\n  } else if (horas < 15 || horas > 200) {\r\n    errors.horas = 'Carga horária deve estar entre 15 e 200 horas';\r\n  }\r\n\r\n  const pesoFalta = parseFloat(materia.pesoFalta);\r\n  if (!materia.pesoFalta || isNaN(pesoFalta)) {\r\n    errors.pesoFalta = 'Peso da falta é obrigatório';\r\n  } else if (pesoFalta <= 0) {\r\n    errors.pesoFalta = 'Peso da falta deve ser maior que zero';\r\n  } else if (pesoFalta > 10) {\r\n    errors.pesoFalta = 'Peso da falta deve ser no máximo 10';\r\n  }\r\n\r\n  return {\r\n    isValid: Object.keys(errors).length === 0,\r\n    errors\r\n  };\r\n};\r\n\r\nexport const validateAvaliacao = (avaliacao) => {\r\n  const errors = {};\r\n\r\n  if (!avaliacao.tipo || !avaliacao.tipo.trim()) {\r\n    errors.tipo = 'Tipo é obrigatório';\r\n  }\r\n\r\n  if (!avaliacao.data) {\r\n    errors.data = 'Data é obrigatória';\r\n  } else {\r\n    const dataAvaliacao = new Date(avaliacao.data);\r\n    const hoje = new Date();\r\n    const umAnoAtras = new Date();\r\n    const umAnoAFrente = new Date();\r\n    \r\n    umAnoAtras.setFullYear(hoje.getFullYear() - 1);\r\n    umAnoAFrente.setFullYear(hoje.getFullYear() + 1);\r\n    \r\n    if (dataAvaliacao < umAnoAtras || dataAvaliacao > umAnoAFrente) {\r\n      errors.data = 'Data deve estar dentro de um período razoável';\r\n    }\r\n  }\r\n\r\n  if (avaliacao.descricao && avaliacao.descricao.length > 200) {\r\n    errors.descricao = 'Descrição deve ter no máximo 200 caracteres';\r\n  }\r\n\r\n  return {\r\n    isValid: Object.keys(errors).length === 0,\r\n    errors\r\n  };\r\n};\r\n\r\nexport const validateFalta = (falta) => {\r\n  const errors = {};\r\n\r\n  if (!falta.data) {\r\n    errors.data = 'Data é obrigatória';\r\n  } else {\r\n    const dataFalta = new Date(falta.data);\r\n    const hoje = new Date();\r\n    if (dataFalta > hoje) {\r\n      errors.data = 'Data não pode ser futura';\r\n    }\r\n    \r\n    const umAnoAtras = new Date();\r\n    umAnoAtras.setFullYear(hoje.getFullYear() - 1);\r\n    if (dataFalta < umAnoAtras) {\r\n      errors.data = 'Data não pode ser muito antiga (máximo 1 ano)';\r\n    }\r\n  }\r\n\r\n  if (falta.motivo && falta.motivo.length > 100) {\r\n    errors.motivo = 'Motivo deve ter no máximo 100 caracteres';\r\n  }\r\n\r\n  return {\r\n    isValid: Object.keys(errors).length === 0,\r\n    errors\r\n  };\r\n};\r\n\r\nexport const validateUser = (userData) => {\r\n  const errors = {};\r\n\r\n  if (!userData.nome || !userData.nome.trim()) {\r\n    errors.nome = 'Nome é obrigatório';\r\n  } else if (userData.nome.trim().length < 2) {\r\n    errors.nome = 'Nome deve ter pelo menos 2 caracteres';\r\n  } else if (userData.nome.trim().length > 50) {\r\n    errors.nome = 'Nome deve ter no máximo 50 caracteres';\r\n  }\r\n\r\n  if (!validateEmail(userData.email)) {\r\n    errors.email = 'Email deve ter um formato válido';\r\n  }\r\n\r\n  const passwordValidation = validatePassword(userData.senha);\r\n  if (!passwordValidation.isValid) {\r\n    errors.senha = passwordValidation.message;\r\n  }\r\n\r\n  return {\r\n    isValid: Object.keys(errors).length === 0,\r\n    errors\r\n  };\r\n};\r\n\r\nexport const validateRequired = (value, fieldName) => {\r\n  if (!value || (typeof value === 'string' && !value.trim())) {\r\n    return {\r\n      isValid: false,\r\n      message: `${fieldName} é obrigatório`\r\n    };\r\n  }\r\n  return { isValid: true, message: '' };\r\n};\r\n\r\nexport const validateLength = (value, min = 0, max = Infinity, fieldName = 'Campo') => {\r\n  const length = value ? value.toString().length : 0;\r\n  \r\n  if (length < min) {\r\n    return {\r\n      isValid: false,\r\n      message: `${fieldName} deve ter pelo menos ${min} caracteres`\r\n    };\r\n  }\r\n  \r\n  if (length > max) {\r\n    return {\r\n      isValid: false,\r\n      message: `${fieldName} deve ter no máximo ${max} caracteres`\r\n    };\r\n  }\r\n  \r\n  return { isValid: true, message: '' };\r\n};\r\n\r\nexport const validateRange = (value, min = -Infinity, max = Infinity, fieldName = 'Campo') => {\r\n  const numValue = parseFloat(value);\r\n  \r\n  if (isNaN(numValue)) {\r\n    return {\r\n      isValid: false,\r\n      message: `${fieldName} deve ser um número válido`\r\n    };\r\n  }\r\n  \r\n  if (numValue < min || numValue > max) {\r\n    return {\r\n      isValid: false,\r\n      message: `${fieldName} deve estar entre ${min} e ${max}`\r\n    };\r\n  }\r\n  \r\n  return { isValid: true, message: '' };\r\n};\r\n\r\nexport const sanitizeMateria = (materia) => {\r\n  return {\r\n    nome: materia.nome?.trim() || '',\r\n    horas: parseInt(materia.horas) || 0,\r\n    pesoFalta: parseFloat(materia.pesoFalta) || 1,\r\n    avaliacoes: materia.avaliacoes || [],\r\n    faltas: materia.faltas || 0,\r\n    maxFaltas: Math.floor((parseInt(materia.horas) || 0) * 0.25),\r\n    id: materia.id || Date.now()\r\n  };\r\n};"],"names":["_ref","setModalOpen","adicionarMateria","useMaterias","addError","addSuccess","useError","nome","setNome","useState","horas","setHoras","pesoFalta","setPesoFalta","avaliacoes","setAvaliacoes","novaAvaliacao","setNovaAvaliacao","tipo","data","descricao","mostrarAvaliacoes","setMostrarAvaliacoes","mostrarCalendario","setMostrarCalendario","_jsx","className","children","_jsxs","onClick","FaTimes","onSubmit","async","e","preventDefault","validation","materia","errors","trim","length","parseInt","isNaN","parseFloat","isValid","Object","keys","validateMateria","maxFaltas","Math","floor","materiaSanitizada","_materia$nome","faltas","id","Date","now","sanitizeMateria","datasFaltas","error","values","join","type","value","onChange","target","placeholder","required","FaPlus","_Fragment","prev","toLocaleDateString","Calendar","date","toISOString","split","locale","minDetail","next2Label","prev2Label","navigationLabel","_ref2","mes","toLocaleString","month","ano","year","title","adicionarAvaliacao","map","av","FaClipboardCheck","FaBook","removerAvaliacao","filter"],"sourceRoot":""}