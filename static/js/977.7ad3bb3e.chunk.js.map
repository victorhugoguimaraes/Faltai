{"version":3,"file":"static/js/977.7ad3bb3e.chunk.js","mappings":"0JAGA,MAAMA,EAAS,CACb,EAAG,CACDC,KAAM,QACNC,IAAK,cACLC,UAAW,EACXC,UAAW,wBAEb,EAAG,CACDH,KAAM,SACNC,IAAK,gBACLC,UAAW,GACXC,UAAW,yBAEb,EAAG,CACDH,KAAM,QACNC,IAAK,cACLC,UAAW,GACXC,UAAW,yBAEb,EAAG,CACDH,KAAM,OACNC,IAAK,gBACLC,UAAW,GACXC,UAAW,yBAEb,EAAG,CACDH,KAAM,WACNC,IAAK,cACLC,UAAW,GACXC,UAAW,2BA2Jf,QAvJA,SAA2BC,GAAyC,IAAxC,SAAEC,EAAQ,QAAEC,EAAO,eAAEC,GAAgBH,EAC/D,MAAOI,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,IAC5BC,EAAWC,IAAgBF,EAAAA,EAAAA,UAAS,IACpCG,EAAqBC,IAA0BJ,EAAAA,EAAAA,UAAS,IAE/DK,EAAAA,EAAAA,YAAU,KACR,MAwCQP,MAAOQ,EAAWL,UAAWM,EAAa,YAAEC,GAxC9BC,MACpB,IAAKC,MAAMC,QAAQhB,IAAiC,IAApBA,EAASiB,OACvC,MAAO,CAAEd,MAAO,EAAGG,UAAW,EAAGO,YAAa,GAGhD,MAAMK,EAAclB,EAASmB,QAAO,CAACC,EAAKC,IAAMD,GAAOE,OAAOD,EAAEE,SAAW,IAAI,GACzEC,EAAiBxB,EAASmB,QAAO,CAACC,EAAKC,IAAMD,GAAOE,OAAOD,EAAEI,YAAc,IAAI,GAErF,GAAuB,IAAnBD,EAAsB,MAAO,CAAErB,MAAO,EAAGG,UAAW,EAAGO,YAAa,GAExE,MAAML,EAAsBkB,KAAKC,IAAI,EAAG,IAAQT,EAAcM,EAAkB,KAC1EI,EAAuBF,KAAKG,IAAI,EAAGH,KAAKC,IAAI,EAAGnB,EAAsB,MAE3E,OAAIoB,GAAwB,GAAY,CACtCzB,MAAO,EACPG,UAAW,IACXO,YAAaS,OAAOd,EAAoBsB,QAAQ,KAE9CF,GAAwB,GAAY,CACtCzB,MAAO,EACPG,UAAWgB,QAAuC,KAA9BM,EAAuB,KAAYE,QAAQ,IAC/DjB,YAAaS,OAAOd,EAAoBsB,QAAQ,KAE9CF,GAAwB,GAAY,CACtCzB,MAAO,EACPG,UAAWgB,QAAuC,KAA9BM,EAAuB,KAAYE,QAAQ,IAC/DjB,YAAaS,OAAOd,EAAoBsB,QAAQ,KAE9CF,GAAwB,GAAY,CACtCzB,MAAO,EACPG,UAAWgB,QAAuC,KAA9BM,EAAuB,KAAYE,QAAQ,IAC/DjB,YAAaS,OAAOd,EAAoBsB,QAAQ,KAE3C,CACL3B,MAAO,EACPG,UAAWgB,QAA+B,IAAvBM,GAA4BE,QAAQ,IACvDjB,YAAaS,OAAOd,EAAoBsB,QAAQ,IACjD,EAGiEhB,GAMpE,GALAV,EAASkB,OAAOX,IAAc,GAC9BJ,EAAae,OAAOV,IAAkB,GACtCH,EAAuBa,OAAOT,IAAgB,GAG1CE,MAAMC,QAAQhB,IAAuC,oBAAnBE,EAA+B,CACnE,MAAM6B,EAAuBC,KAAKC,MAAMC,aAAaC,QAAQ,0BAA4B,MACnFC,EAAoB,GAmB1B,GAjBApC,EAASqC,SAAQ,CAACC,EAASC,KACzB,MAAMhB,EAASD,OAAOgB,EAAQf,SAAW,EACnCE,EAAYH,OAAOgB,EAAQb,YAAc,EACzCe,EAAcC,OAAOH,EAAQ3C,MAAQ,kBACrC+C,EAAgB,iBAAiBF,KAAeD,IAElDhB,GAAUE,GAAaA,EAAY,IAAMM,EAAqBY,SAASD,KACzExC,EAAe,CACb0C,OAAQ,gCACRC,SAAU,yCAAsCL,IAChDM,KAAM,WAERV,EAAkBW,KAAKL,GACzB,IAIEN,EAAkBnB,OAAS,EAAG,CAChC,MAAM+B,EAAoB,IAAIjB,KAAyBK,GACvDF,aAAae,QAAQ,wBAAyBjB,KAAKkB,UAAUF,GAC/D,CACF,IACC,CAAChD,EAAUE,IAEd,MAAMiD,EAAazD,EAAOS,GACpBiD,EAAe1D,EAAOS,EAAQ,GAEpC,OACEkD,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iFAAgFC,UAC7FC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,0CAAyCC,SAAA,EACtDC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,yCAAwCC,SAAA,EACrDC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,8BAA6BC,SAAA,EAC1CF,EAAAA,EAAAA,KAACI,EAAAA,IAAQ,CAACH,UAAU,4BACpBD,EAAAA,EAAAA,KAAA,MAAIC,UAAU,sCAAqCC,SAAC,gCAItDF,EAAAA,EAAAA,KAAA,UACEK,QAASzD,EACTqD,UAAU,oCAAmCC,UAE7CF,EAAAA,EAAAA,KAACM,EAAAA,IAAO,UAIZH,EAAAA,EAAAA,MAAA,OAAKF,UAAU,YAAWC,SAAA,EACxBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,cAAaC,SAAA,EAC1BF,EAAAA,EAAAA,KAAA,OAAKC,UAAW,kEAAkEH,EAAWvD,sBAAsB2D,UACjHF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,qBAAoBC,SAAEpD,OAExCkD,EAAAA,EAAAA,KAAA,MAAIC,UAAU,wBAAuBC,SAAEJ,EAAWxD,QAClD6D,EAAAA,EAAAA,MAAA,KAAGF,UAAU,6BAA4BC,SAAA,CAAC,sBACvBjC,OAAOd,GAAqBsB,QAAQ,IAAM,MAAM,OAElEsB,IACCI,EAAAA,EAAAA,MAAA,KAAGF,UAAU,6BAA4BC,SAAA,CAAC,wBACxBH,EAAazD,WAKlCQ,EAAQ,IACPqD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,+CAA8CC,UAC3DF,EAAAA,EAAAA,KAAA,OACEC,UAAW,UAAUH,EAAWvD,kCAChCgE,MAAO,CAAEC,MAAO,GAAGvC,OAAOhB,IAAc,WAG5CkD,EAAAA,EAAAA,MAAA,OAAKF,UAAU,kDAAiDC,SAAA,EAC9DF,EAAAA,EAAAA,KAAA,QAAAE,SAAOJ,EAAWrD,YACjBsD,IAAgBC,EAAAA,EAAAA,KAAA,QAAAE,SAAOH,EAAatD,mBAK3C0D,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iBAAgBC,SAAA,EAC7BF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,oCAAmCC,SAAC,+BACjDF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,yBAAwBC,SACpCO,OAAOC,QAAQrE,GAAQsE,KAAIC,IAAA,IAAEC,EAAK/D,GAAM8D,EAAA,OACvCT,EAAAA,EAAAA,MAAA,OAAeF,UAAU,0BAAyBC,SAAA,EAChDF,EAAAA,EAAAA,KAAA,OAAKC,UAAW,wBAAwBnD,EAAMP,SAC9C4D,EAAAA,EAAAA,MAAA,QAAMF,UAAU,wBAAuBC,SAAA,CACpCpD,EAAMR,KAAK,KAAGQ,EAAML,eAHfoE,EAKJ,gBAQtB,C","sources":["components/GamificationSystem.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { FaTrophy, FaTimes } from 'react-icons/fa';\r\n\r\nconst NIVEIS = {\r\n  1: {\r\n    nome: 'Ferro',\r\n    cor: 'bg-gray-500',\r\n    requisito: 0,\r\n    descricao: '0-20% de presença'\r\n  },\r\n  2: {\r\n    nome: 'Bronze',\r\n    cor: 'bg-yellow-700',\r\n    requisito: 0.2,\r\n    descricao: '20-40% de presença'\r\n  },\r\n  3: {\r\n    nome: 'Prata',\r\n    cor: 'bg-gray-400',\r\n    requisito: 0.4,\r\n    descricao: '40-60% de presença'\r\n  },\r\n  4: {\r\n    nome: 'Ouro',\r\n    cor: 'bg-yellow-500',\r\n    requisito: 0.6,\r\n    descricao: '60-80% de presença'\r\n  },\r\n  5: {\r\n    nome: 'Diamante',\r\n    cor: 'bg-blue-600',\r\n    requisito: 0.8,\r\n    descricao: '80-100% de presença'\r\n  }\r\n};\r\n\r\nfunction GamificationSystem({ materias, onClose, onNotification }) {\r\n  const [nivel, setNivel] = useState(1);\r\n  const [progresso, setProgresso] = useState(0);\r\n  const [porcentagemPresenca, setPorcentagemPresenca] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const calcularNivel = () => {\r\n      if (!Array.isArray(materias) || materias.length === 0) {\r\n        return { nivel: 1, progresso: 0, porcentagem: 0 };\r\n      }\r\n\r\n      const totalFaltas = materias.reduce((sum, m) => sum + (Number(m.faltas) || 0), 0);\r\n      const totalMaxFaltas = materias.reduce((sum, m) => sum + (Number(m.maxFaltas) || 0), 0);\r\n      \r\n      if (totalMaxFaltas === 0) return { nivel: 1, progresso: 0, porcentagem: 0 };\r\n\r\n      const porcentagemPresenca = Math.max(0, 100 - ((totalFaltas / totalMaxFaltas) * 100));\r\n      const progressoNormalizado = Math.min(1, Math.max(0, porcentagemPresenca / 100));\r\n\r\n      if (progressoNormalizado >= 0.8) return { \r\n        nivel: 5, \r\n        progresso: 100, \r\n        porcentagem: Number(porcentagemPresenca.toFixed(1)) \r\n      };\r\n      if (progressoNormalizado >= 0.6) return { \r\n        nivel: 4, \r\n        progresso: Number(((progressoNormalizado - 0.6) * 500).toFixed(1)), \r\n        porcentagem: Number(porcentagemPresenca.toFixed(1)) \r\n      };\r\n      if (progressoNormalizado >= 0.4) return { \r\n        nivel: 3, \r\n        progresso: Number(((progressoNormalizado - 0.4) * 500).toFixed(1)), \r\n        porcentagem: Number(porcentagemPresenca.toFixed(1)) \r\n      };\r\n      if (progressoNormalizado >= 0.2) return { \r\n        nivel: 2, \r\n        progresso: Number(((progressoNormalizado - 0.2) * 500).toFixed(1)), \r\n        porcentagem: Number(porcentagemPresenca.toFixed(1)) \r\n      };\r\n      return { \r\n        nivel: 1, \r\n        progresso: Number((progressoNormalizado * 500).toFixed(1)), \r\n        porcentagem: Number(porcentagemPresenca.toFixed(1)) \r\n      };\r\n    };\r\n\r\n    const { nivel: novoNivel, progresso: novoProgresso, porcentagem } = calcularNivel();\r\n    setNivel(Number(novoNivel) || 1);\r\n    setProgresso(Number(novoProgresso) || 0);\r\n    setPorcentagemPresenca(Number(porcentagem) || 0);\r\n\r\n    // Verifica matérias com máximo de faltas atingido (com controle de duplicatas)\r\n    if (Array.isArray(materias) && typeof onNotification === 'function') {\r\n      const notificacoesEnviadas = JSON.parse(localStorage.getItem('notificacoes_enviadas') || '[]');\r\n      const novasNotificacoes = [];\r\n      \r\n      materias.forEach((materia, index) => {\r\n        const faltas = Number(materia.faltas) || 0;\r\n        const maxFaltas = Number(materia.maxFaltas) || 0;\r\n        const nomeMateria = String(materia.nome || 'uma matéria');\r\n        const notificacaoId = `limite-faltas-${nomeMateria}-${index}`;\r\n        \r\n        if (faltas >= maxFaltas && maxFaltas > 0 && !notificacoesEnviadas.includes(notificacaoId)) {\r\n          onNotification({\r\n            titulo: '⚠️ Limite de Faltas',\r\n            mensagem: `Você atingiu o limite de faltas em ${nomeMateria}`,\r\n            tipo: 'alerta'\r\n          });\r\n          novasNotificacoes.push(notificacaoId);\r\n        }\r\n      });\r\n      \r\n      // Salva as notificações enviadas no localStorage para evitar duplicatas\r\n      if (novasNotificacoes.length > 0) {\r\n        const todasNotificacoes = [...notificacoesEnviadas, ...novasNotificacoes];\r\n        localStorage.setItem('notificacoes_enviadas', JSON.stringify(todasNotificacoes));\r\n      }\r\n    }\r\n  }, [materias, onNotification]);\r\n\r\n  const nivelAtual = NIVEIS[nivel];\r\n  const proximoNivel = NIVEIS[nivel + 1];\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\r\n      <div className=\"bg-white rounded-lg p-6 w-full max-w-md\">\r\n        <div className=\"flex justify-between items-center mb-6\">\r\n          <div className=\"flex items-center space-x-3\">\r\n            <FaTrophy className=\"text-blue-600 text-2xl\" />\r\n            <h2 className=\"text-xl font-semibold text-gray-800\">\r\n              Nível de Presença\r\n            </h2>\r\n          </div>\r\n          <button\r\n            onClick={onClose}\r\n            className=\"text-gray-500 hover:text-gray-700\"\r\n          >\r\n            <FaTimes />\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"space-y-6\">\r\n          <div className=\"text-center\">\r\n            <div className={`inline-flex items-center justify-center w-16 h-16 rounded-full ${nivelAtual.cor} text-white mb-2`}>\r\n              <span className=\"text-2xl font-bold\">{nivel}</span>\r\n            </div>\r\n            <h3 className=\"text-lg font-semibold\">{nivelAtual.nome}</h3>\r\n            <p className=\"text-sm text-gray-600 mt-1\">\r\n              Presença atual: {Number(porcentagemPresenca).toFixed(1) || '0.0'}%\r\n            </p>\r\n            {proximoNivel && (\r\n              <p className=\"text-sm text-gray-600 mt-1\">\r\n                Próximo nível: {proximoNivel.nome}\r\n              </p>\r\n            )}\r\n          </div>\r\n\r\n          {nivel < 5 && (\r\n            <div>\r\n              <div className=\"h-2 bg-gray-200 rounded-full overflow-hidden\">\r\n                <div\r\n                  className={`h-full ${nivelAtual.cor} transition-all duration-500`}\r\n                  style={{ width: `${Number(progresso) || 0}%` }}\r\n                />\r\n              </div>\r\n              <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\r\n                <span>{nivelAtual.descricao}</span>\r\n                {proximoNivel && <span>{proximoNivel.descricao}</span>}\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"mt-4 space-y-2\">\r\n            <p className=\"text-sm font-medium text-gray-700\">Níveis de Presença:</p>\r\n            <div className=\"grid grid-cols-1 gap-2\">\r\n              {Object.entries(NIVEIS).map(([key, nivel]) => (\r\n                <div key={key} className=\"flex items-center gap-2\">\r\n                  <div className={`w-3 h-3 rounded-full ${nivel.cor}`} />\r\n                  <span className=\"text-sm text-gray-600\">\r\n                    {nivel.nome}: {nivel.descricao}\r\n                  </span>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GamificationSystem; "],"names":["NIVEIS","nome","cor","requisito","descricao","_ref","materias","onClose","onNotification","nivel","setNivel","useState","progresso","setProgresso","porcentagemPresenca","setPorcentagemPresenca","useEffect","novoNivel","novoProgresso","porcentagem","calcularNivel","Array","isArray","length","totalFaltas","reduce","sum","m","Number","faltas","totalMaxFaltas","maxFaltas","Math","max","progressoNormalizado","min","toFixed","notificacoesEnviadas","JSON","parse","localStorage","getItem","novasNotificacoes","forEach","materia","index","nomeMateria","String","notificacaoId","includes","titulo","mensagem","tipo","push","todasNotificacoes","setItem","stringify","nivelAtual","proximoNivel","_jsx","className","children","_jsxs","FaTrophy","onClick","FaTimes","style","width","Object","entries","map","_ref2","key"],"sourceRoot":""}